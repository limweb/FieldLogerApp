<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:fieldinputservice="services.fieldinputservice.*"
			   xmlns:fieldprojectservice="services.fieldprojectservice.*"
			   xmlns:fieldreportreferenceService="services.fieldreportreferenceService.*"
			   xmlns:fieldreportrepresentativeService="services.fieldreportrepresentativeService.*"
			   xmlns:fieldreportpersonnalService="services.fieldreportpersonnalService.*"
			   xmlns:lineChart="com.icd.fieldlogger.myHome.report.lineChart.*"
			   xmlns:barChart="com.icd.fieldlogger.myHome.report.barChart.*"
			   xmlns:realtimeData="com.icd.fieldlogger.myHome.realtime.realtimeData.*"
			   xmlns:dataList="com.icd.fieldlogger.myHome.realtime.dataList.*"
			   xmlns:fieldreportreferenceservice="services.fieldreportreferenceservice.*"
			   xmlns:fieldreportrepresentativeservice="services.fieldreportrepresentativeservice.*"
			   xmlns:fieldreportpersonnalservice="services.fieldreportpersonnalservice.*"
			   xmlns:fieldreportinfoservice="services.fieldreportinfoservice.*"
			   xmlns:fieldinfoprojectservice="services.fieldinfoprojectservice.*"
			   xmlns:fieldinfoserviceservice="services.fieldinfoserviceservice.*"
			   xmlns:fieldinfoservicelistservice="services.fieldinfoservicelistservice.*"
			   width="100%" height="100%" borderVisible="true" close="closeHandler(event)"
			   contentBackgroundColor="#FFFFFF" fontSize="11"
			   implements="icd.mgmtview.api.IManagementView" resize="resizeHandler(event)"
			   title="{titleName}"
			   creationComplete="titlewindow1_creationCompleteHandler(event)" xmlns:HIDL="com.icd.fieldlogger.myHome.realtime.HIDL.*"
			   >
	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			import flash.sampler.NewObjectSample;
			
			import icd.mgmtview.api.constant.ManagementViewConst;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.data.events.DataConflictEvent;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import spark.events.DropDownEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import valueObjects.Allinfo_project;
			import valueObjects.Allinfo_service;
			import valueObjects.Allinfo_servicelist;
			import valueObjects.Allreport_info;
			import valueObjects.Allreport_infoAdvanced;
			import valueObjects.Allreport_personnal;
			import valueObjects.Allreport_reference;
			import valueObjects.Allreport_representative;
			
			[Bindable] public static var pjName:String;
			[Bindable] public static var svName:String;
			[Bindable] public static var reportVO:Allreport_infoAdvanced = new Allreport_infoAdvanced();
			[Bindable] public static var chkint:int = 0;
			
			[Bindable] private var MODE:int;
			[Bindable] private var titleName:String;
			
			public function onApplicationResize(event:Event):void{}
			public function prepareview(mode:int, titleName:String, objVO:Object=null):void{
				this.title = titleName
				this.MODE = mode;
				if(this.MODE === ManagementViewConst.MODE_ADD){
					reportVO 							= new Allreport_infoAdvanced();
					reportVO.reportID					= "RP" + new Date().valueOf().toString();
					reportVO.projectID					= "";
					reportVO.serviceID					= "";
					reportVO.report_startDate			= dtf.format(new Date());
					reportVO.report_endDate				= dtf.format(new Date());
					reportVO.report_locked				= "0";
					reportVO.report_representative		= "0";
					reportVO.report_ref					= "0";
					reportVO.report_personnel			= "0";
					reportVO.report_client				= '2';
				}if(this.MODE === ManagementViewConst.MODE_EDIT){
					reportVO = objVO as Allreport_infoAdvanced;
					getAllField_infoserviceLinkResult.token = fieldinfoserviceService.getAllField_infoserviceLink(reportVO.serviceID);
					
				}
				getAllField_infoprojectActiveResult.token = fieldinfoprojectService.getAllField_infoprojectActive();
				getAllField_infoservicelistActiveResult.token = fieldinfoservicelistService.getAllField_infoservicelistActive();
				getField_referenceByreportIDResult.token = fieldreportreferenceService.getField_referenceByreportID(reportVO.reportID);
				getField_representativeByreportIDResult.token = fieldreportrepresentativeService.getField_representativeByreportID(reportVO.reportID);
				getField_personnalByreportIDResult.token = fieldreportpersonnalService.getField_personnalByreportID(reportVO.reportID);
				
			}
			
			[Bindable] private var arrProjectName:ArrayCollection = new ArrayCollection();
			protected function getAllField_infoprojectActiveResult_resultHandler(event:ResultEvent):void{
				arrProjectName = event.result as ArrayCollection;
				if(reportVO.projectID !== '') {
					setProject();
				}
			}
			private function setProject():void{
				for each (var getProject:Allinfo_project in arrProjectName) {
					if(getProject.infoproID === reportVO.projectID){
						ddlProjectName.selectedItem = getProject;
						break;
					}
				}
				
				pjName = ddlProjectName.selectedItem.infopro_name;
			}
			
			[Bindable] private var arrServiceName:ArrayCollection = new ArrayCollection();
			protected function getAllField_infoservicelistActiveResult_resultHandler(event:ResultEvent):void{
				arrServiceName = event.result as ArrayCollection;
				if(reportVO.serviceID !== '') {
					setService();
				}
			}
			private function setService():void{
				for each (var getService:Allinfo_servicelist in arrServiceName) {
					if(getService.slistID === reportVO.serviceID){
						ddlServiceName.selectedItem = getService;
						break;
					}
				}
				svName = ddlServiceName.selectedItem.slist_name;
			}
			
			protected function closeHandler(event:CloseEvent):void{
				tbdatalist.removeevent();
				Realtime.getInstance().stop();
				PopUpManager.removePopUp(this);
			}
			
			
			
			
			protected function resizeHandler(event:ResizeEvent):void{
				this.height = parentApplication.height-20;
				this.width  = parentApplication.width-20;
			}
			[Bindable] private var cStart:uint = 0xB5B5B5;
			[Bindable] private var cStop:uint  = 0xB5B5B5;
			protected function lbtnStart_clickHandler(event:MouseEvent):void{
				cStart = 0x2FAF2C;
				cStop  = 0xB5B5B5;
//				Alert.show("Last Data Record ?","Continue & Mearge", Alert.YES | Alert.NO, this, null, null);
				viewStack.selectedIndex = 1;
				if(tbdatalist == null){
					tbdatalist = new realtime_DatalistModule();
					tbdatalist.init();
//					tbdatalist.start();
				} else {
					tbdatalist.init();
//					tbdatalist.start();
				}
				Realtime.getInstance().url = realtime_InfoModule.urlSensor;
				Realtime.getInstance().start();
			}
			
			protected function AlertDataRecord(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES){
					//PopUpManager.removePopUp(this);
				}
			}
			protected function lbtnStop_clickHandler(event:MouseEvent):void{
				cStart = 0xB5B5B5;
				cStop  = 0xFF0000;
//				tbdatalist.stop();
				Realtime.getInstance().stop();
			}
			
			
			public function alertRef():void{
				var urlReq:URLRequest = new URLRequest();
				urlReq = new URLRequest('../fieldlogger/upload_documents/01.jpg');
				navigateToURL(urlReq, "_blank");
			}
			
			protected function lbtnSave_clickHandler(event:MouseEvent):void{
				Alert.show('Please confirm!', 'Confirm Save', Alert.YES | Alert.NO, this, AlerSave, null, Alert.YES);
				
			}
			protected function AlerSave(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES) {
					var UpdateReport:Allreport_info 		= new Allreport_info();
					UpdateReport.reportNo					= parseInt(reportVO.reportNo);
					UpdateReport.reportID					= reportVO.reportID;
					UpdateReport.projectID					= ddlProjectName.selectedItem.infoproID;
					UpdateReport.serviceID					= ddlServiceName.selectedItem.slistID;
					UpdateReport.report_detail				= txtDetail.text;
					UpdateReport.report_startDate			= dtfStart.text;
					UpdateReport.report_endDate				= dtfEnd.text;
					UpdateReport.report_locked				= chxLocked.selected? '1':'0';
					UpdateReport.report_client				= '2';
					UpdateReport.report_representative		= "0";
					UpdateReport.report_ref					= "0";
					UpdateReport.report_personnel			= "0";
					if(this.MODE === ManagementViewConst.MODE_ADD){
						createField_report_infoResult.token = fieldreportinfoService.createField_report_info(UpdateReport);
					}if(this.MODE === ManagementViewConst.MODE_EDIT){
						updateField_report_infoResult.token = fieldreportinfoService.updateField_report_info(UpdateReport);
					}
					
				}
			}
			
			protected function report_infoResult_resultHandler(event:ResultEvent):void{
				//trace('OK');
				getField_report_infoAdvancedByreportIDResult.token = fieldreportinfoService.getField_report_infoAdvancedByreportID(realtime_InfoModule.reportVO.reportID);
			}
			
			protected function getField_report_infoAdvancedByreportIDResult_resultHandler(event:ResultEvent):void{
				reportVO = event.result as Allreport_infoAdvanced;
				trace(ObjectUtil.toString(reportVO));
				checkSave = true;
			}
			
			[Bindable] private var checkSave:Boolean = true;
			protected function changeHandler():void{
				checkSave = false;
			}
			
			/////**Reference**/////
			[Bindable] private var arrReference:ArrayCollection = new ArrayCollection();
			protected function getField_referenceByreportIDResult_resultHandler(event:ResultEvent):void{
				arrReference = event.result as ArrayCollection;
			}
			
			[Bindable] private var auditRef:FileFilter = new FileFilter("All Files (*.*)","*.*;");
			[Bindable] private var FilerefFile:FileReference = new FileReference();
			[Bindable] private var uploadfile:Array = new Array(auditRef);
			[Bindable] private var fileass:ByteArray = new ByteArray();
			[Bindable] private var fileSize:String = new String();
			
			private function formatFileSize(numSize:Number):String {
				var strReturn:String;
				numSize = Number(numSize / 1024);
				strReturn = String(numSize.toFixed(1) + " KB");
				if (numSize > 1024) {
					numSize = numSize / 1024;
					strReturn = String(numSize.toFixed(1) + " MB");
					if (numSize > 1024) {
						numSize = numSize / 1024;
						strReturn = String(numSize.toFixed(1) + " GB");
					}
				}
				return strReturn;
			}
			
			[Bindable] private var status:int;
			protected function lbtnAddReference_clickHandler(event:MouseEvent,mode:int):void{
				status = mode;
				FilerefFile.addEventListener(Event.SELECT, inspecFile_Select);
				FilerefFile.addEventListener(Event.COMPLETE, inspecPreviewFileHandler);
				FilerefFile.browse(uploadfile);
			}
			
			public function alertEdit(mode:int):void{
				dgSelectedNo = dgReference.selectedItem.refNo;
				dgSelectedID = dgReference.selectedItem.refID;
				dgSelectedFile = dgReference.selectedItem.ref_name;
				status = mode;
				FilerefFile.addEventListener(Event.SELECT, inspecFile_Select);
				FilerefFile.addEventListener(Event.COMPLETE, inspecPreviewFileHandler);
				FilerefFile.browse(uploadfile);
			}
			
			private function inspecFile_Select(e:Event) : void {
				FilerefFile.load();
			}
			
			private function inspecPreviewFileHandler(e:Event) : void {
				var loader:Loader = new Loader();
				//loader.loadBytes(FilerefFile.data);
				txtfileName.text = FilerefFile.name;//picdri field
				fileass = FilerefFile.data;
				fileSize = formatFileSize(FilerefFile.size);
				gotoSaveFile(status);
			}
			protected function gotoSaveFile(mode:int):void{
				if(mode === 1){
					var createReference:Allreport_reference 	= new Allreport_reference();
					createReference.refID				= "REF" + new Date().valueOf().toString();
					createReference.projectID			= reportVO.reportID;
					createReference.ref_name			= txtfileName.text;
					createReference.ref_by				= "";
					createReference.ref_note			= "";
					createReference.ref_eventDate		= dtf.format(new Date());
					createField_referencePicResult.token = fieldreportreferenceService.createField_referencePic(createReference, fileass);
				}if(mode === 2){
					var updateReference:Allreport_reference 	= new Allreport_reference();
					updateReference.refNo			= dgSelectedNo;
					updateReference.refID			= dgSelectedID;
					updateReference.ref_name	    = txtfileName.text;
					updateReference.ref_eventDate	= dtf.format(new Date());
					updateReference.ref_1			= dgSelectedFile;
					updateField_referencePicResult.token = fieldreportreferenceService.updateField_referencePic(updateReference, fileass);
				}
			}
			
			protected function dgReference_itemEditEndHandler(event:DataGridEvent):void{
				var updateRef:Allreport_reference = new Allreport_reference();
				if(event.dataField === 'ref_by'){
					event.preventDefault();
					updateRef.ref_by =  (dgReference.itemEditorInstance as mx.controls.TextInput).text;
					updateRef.refNo = dgReference.selectedItem.refNo;
					dgReference.destroyItemEditor();
					updateField_referenceEditorColumnResult.token = fieldreportreferenceService.updateField_referenceEditorColumn(updateRef, "ref_by");
				}
				if(event.dataField === 'ref_note'){
					event.preventDefault();
					updateRef.ref_note =  (dgReference.itemEditorInstance as mx.controls.TextInput).text;
					updateRef.refNo = dgReference.selectedItem.refNo;
					dgReference.destroyItemEditor();
					updateField_referenceEditorColumnResult.token = fieldreportreferenceService.updateField_referenceEditorColumn(updateRef, "ref_note");
				}
			}
			
			[Bindable] private var dgSelectedNo:int;
			[Bindable] private var dgSelectedID:String;
			[Bindable] private var dgSelectedFile:String;
			public function alertDeleteRef():void{
				checkSave = false;
				dgSelectedNo = dgReference.selectedItem.refNo;
				dgSelectedFile = dgReference.selectedItem.ref_name;
				Alert.show("Are you sure?", "Confirm Delete", Alert.YES | Alert.NO, this, deleteReference, null, Alert.YES);
			}
			protected function deleteReference(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES) {
					deleteField_referenceResult.token = fieldreportreferenceService.deleteField_reference(dgSelectedNo,dgSelectedFile);
				}
			}
			
			public function alertView():void{
				var urlReq:URLRequest = new URLRequest();
				urlReq = new URLRequest('../fieldlogger/upload_documents/' + dgReference.selectedItem.ref_name);
				navigateToURL(urlReq, "_blank");
			}
			
			
			protected function referencePicResult_resultHandler(event:ResultEvent):void{
				getField_referenceByreportIDResult.token = fieldreportreferenceService.getField_referenceByreportID(reportVO.reportID);
			}
			
			
			/////**Repersentative**/////
			[Bindable] private var arrRepresentative:ArrayCollection = new ArrayCollection();
			protected function getField_representativeByreportIDResult_resultHandler(event:ResultEvent):void{
				arrRepresentative = event.result as ArrayCollection;
			}
			protected function lbtnAddRepresentative_clickHandler(event:MouseEvent):void{
				var createRep:Allreport_representative = new Allreport_representative();
				createRep.repID					= "REP" + new Date().valueOf().toString();
				createRep.projectID				= reportVO.reportID;
				createRep.rep_name				= "";
				createRep.rep_role				= "";
				createRep.rep_from				= "";
				createRep.rep_to				= "";
				createRep.rep_eventDate			= dtf.format(new Date());
				createField_representativeResult.token = fieldreportrepresentativeService.createField_representative(createRep);
			}
			protected function dgRepresentative_itemEditEndHandler(event:DataGridEvent):void{
				var updateRep:Allreport_representative = new Allreport_representative();
				if(event.dataField === 'rep_name'){
					event.preventDefault();
					updateRep.rep_name =  (dgRepresentative.itemEditorInstance as mx.controls.TextInput).text;
					updateRep.repNo = dgRepresentative.selectedItem.repNo;
					dgRepresentative.destroyItemEditor();
					updateField_representativeEditorColumnResult.token = fieldreportrepresentativeService.updateField_representativeEditorColumn(updateRep, "rep_name");
				}
				if(event.dataField === 'rep_role'){
					event.preventDefault();
					updateRep.rep_role =  (dgRepresentative.itemEditorInstance as mx.controls.TextInput).text;
					updateRep.repNo = dgRepresentative.selectedItem.repNo;
					dgRepresentative.destroyItemEditor();
					updateField_representativeEditorColumnResult.token = fieldreportrepresentativeService.updateField_representativeEditorColumn(updateRep, "rep_role");
				}
				if(event.dataField === 'rep_from'){
					event.preventDefault();
					updateRep.rep_from =  (dgRepresentative.itemEditorInstance as mx.controls.TextInput).text;
					updateRep.repNo = dgRepresentative.selectedItem.repNo;
					dgRepresentative.destroyItemEditor();
					updateField_representativeEditorColumnResult.token = fieldreportrepresentativeService.updateField_representativeEditorColumn(updateRep, "rep_from");
				}
				if(event.dataField === 'rep_to'){
					event.preventDefault();
					updateRep.rep_to =  (dgRepresentative.itemEditorInstance as mx.controls.TextInput).text;
					updateRep.repNo = dgRepresentative.selectedItem.repNo;
					dgRepresentative.destroyItemEditor();
					updateField_representativeEditorColumnResult.token = fieldreportrepresentativeService.updateField_representativeEditorColumn(updateRep, "rep_to");
				}
				updateRep.repNo 		= dgRepresentative.selectedItem.repNo;
				updateRep.rep_eventDate = dtf.format(new Date());
				updateField_representativeEditorColumnResult.token = fieldreportrepresentativeService.updateField_representativeEditorColumn(updateRep, "rep_eventDate");
			}
			
			protected function representativeResult_resultHandler(event:ResultEvent):void{
				getField_representativeByreportIDResult.token = fieldreportrepresentativeService.getField_representativeByreportID(reportVO.reportID);
			}
			
			public function alertDeleteRep():void{
				checkSave = false;
				dgSelectedNo = dgRepresentative.selectedItem.repNo;
				Alert.show("Are you sure?", "Confirm Delete", Alert.YES | Alert.NO, this, deleteRepresentative, null, Alert.YES);
			}
			protected function deleteRepresentative(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES){
					deleteField_representativeResult.token = fieldreportrepresentativeService.deleteField_representative(dgSelectedNo);
				}
			}
			
			/////**Personnal**/////
			[Bindable] private var arrPersonnal:ArrayCollection = new ArrayCollection();
			protected function getField_personnalByreportIDResult_resultHandler(event:ResultEvent):void{
				arrPersonnal = event.result as ArrayCollection;
			}
			protected function lbtnAddPersonnel_clickHandler(event:MouseEvent):void{
				var createPersonnal:Allreport_personnal = new Allreport_personnal();
				createPersonnal.personID		 = "PSN" + new Date().valueOf().toString();
				createPersonnal.projectID		 = reportVO.reportID;
				createPersonnal.person_leader	 = "0";
				createPersonnal.person_name		 = "";
				createPersonnal.person_lastname	 = "";
				createPersonnal.person_role		 = "";
				createPersonnal.person_eventDate = dtf.format(new Date());
				createField_personnalResult.token = fieldreportpersonnalService.createField_personnal(createPersonnal);
			}
			protected function dgPersonnel_itemEditEndHandler(event:DataGridEvent):void{
				var updatePersonnal:Allreport_personnal = new Allreport_personnal();
				if(event.dataField === 'person_name'){
					event.preventDefault();
					updatePersonnal.person_name =  (dgPersonnel.itemEditorInstance as mx.controls.TextInput).text;
					updatePersonnal.personNo = dgPersonnel.selectedItem.personNo;
					dgPersonnel.destroyItemEditor();
					updateField_personnalEditorColumnResult.token = fieldreportpersonnalService.updateField_personnalEditorColumn(updatePersonnal, "person_name");
				}
				if(event.dataField === 'person_lastname'){
					event.preventDefault();
					updatePersonnal.person_lastname =  (dgPersonnel.itemEditorInstance as mx.controls.TextInput).text;
					updatePersonnal.personNo = dgPersonnel.selectedItem.personNo;
					dgPersonnel.destroyItemEditor();
					updateField_personnalEditorColumnResult.token = fieldreportpersonnalService.updateField_personnalEditorColumn(updatePersonnal, "person_lastname");
				}
				if(event.dataField === 'person_role'){
					event.preventDefault();
					updatePersonnal.person_role =  (dgPersonnel.itemEditorInstance as mx.controls.TextInput).text;
					updatePersonnal.personNo = dgPersonnel.selectedItem.personNo;
					dgPersonnel.destroyItemEditor();
					updateField_personnalEditorColumnResult.token = fieldreportpersonnalService.updateField_personnalEditorColumn(updatePersonnal, "person_role");
				}
				updatePersonnal.personNo 		= dgPersonnel.selectedItem.personNo;
				updatePersonnal.person_eventDate = dtf.format(new Date());
				updateField_personnalEditorColumnResult.token = fieldreportpersonnalService.updateField_personnalEditorColumn(updatePersonnal, "person_eventDate");
			}
			
			public function alertDeletePersonnal():void{
				dgSelectedNo = dgPersonnel.selectedItem.personNo;
				Alert.show("Are you sure?", "Confirm Delete", Alert.YES | Alert.NO, this, deletePersonnal, null, Alert.YES);
			}
			protected function deletePersonnal(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES){
					deleteField_personnalResult.token = fieldreportpersonnalService.deleteField_personnal(dgSelectedNo);
				}
			}
			protected function personnalResult_resultHandler(event:ResultEvent):void{
				getField_personnalByreportIDResult.token = fieldreportpersonnalService.getField_personnalByreportID(reportVO.reportID);
			}
			
			protected function ddlProjectName_closeHandler(event:DropDownEvent):void{
				pjName = ddlProjectName.selectedItem.infopro_name;
				lbClient.text = ddlProjectName.selectedItem.infopro_clientID;
			}
			
			protected function ddlServiceName_closeHandler(event:DropDownEvent):void{
				svName = ddlServiceName.selectedItem.slist_name;
				getAllField_infoserviceLinkResult.token = fieldinfoserviceService.getAllField_infoserviceLink(ddlServiceName.selectedItem.slistID);
			}
		
			[Bindable] public static var urlSensor:String;
			protected function getAllField_infoserviceLinkResult_resultHandler(event:ResultEvent):void{
				//trace(event.result as String);
				urlSensor = event.result as String;
			}
		

			
			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				fieldinfoserviceService.getAllField_infoserviceSensorRealtime(realtime_InfoModule.reportVO.sID);
				chkint = 1;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:DateFormatter id="dtf" formatString="YYYY-MM-DD"/>
		
		<!--Project-->
		<fieldreportinfoservice:FieldreportinfoService id="fieldreportinfoService"
													   fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
													   showBusyCursor="true"/>
		<s:CallResponder id="createField_report_infoResult" result="report_infoResult_resultHandler(event)"/>
		<s:CallResponder id="updateField_report_infoResult"  result="report_infoResult_resultHandler(event)"/>
		<s:CallResponder id="getField_report_infoAdvancedByreportIDResult" result="getField_report_infoAdvancedByreportIDResult_resultHandler(event)"/>
		
		<!--Reference-->
		<fieldreportreferenceservice:FieldreportreferenceService id="fieldreportreferenceService"
																 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
																 showBusyCursor="true"/>
		<s:CallResponder id="getField_referenceByreportIDResult" result="getField_referenceByreportIDResult_resultHandler(event)"/>
		<s:CallResponder id="createField_referencePicResult" result="referencePicResult_resultHandler(event)"/>
		<s:CallResponder id="updateField_referenceEditorColumnResult" result="referencePicResult_resultHandler(event)"/>
		<s:CallResponder id="deleteField_referenceResult" result="referencePicResult_resultHandler(event)"/>
		<s:CallResponder id="updateField_referencePicResult" result="referencePicResult_resultHandler(event)"/>
		
		<!--Representative-->
		<fieldreportrepresentativeservice:FieldreportrepresentativeService id="fieldreportrepresentativeService"
																		   fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
																		   showBusyCursor="true"/>
		<s:CallResponder id="getField_representativeByreportIDResult" result="getField_representativeByreportIDResult_resultHandler(event)"/>
		<s:CallResponder id="createField_representativeResult" result="representativeResult_resultHandler(event)"/>
		<s:CallResponder id="updateField_representativeEditorColumnResult" result="representativeResult_resultHandler(event)"/>
		<s:CallResponder id="deleteField_representativeResult" result="representativeResult_resultHandler(event)"/>
		<!--Personnal-->
		<fieldreportpersonnalservice:FieldreportpersonnalService id="fieldreportpersonnalService"
																 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
																 showBusyCursor="true"/>
		<s:CallResponder id="getField_personnalByreportIDResult" result="getField_personnalByreportIDResult_resultHandler(event)"/>
		<s:CallResponder id="createField_personnalResult" result="personnalResult_resultHandler(event)"/>
		<s:CallResponder id="updateField_personnalEditorColumnResult" result="personnalResult_resultHandler(event)"/>
		<s:CallResponder id="deleteField_personnalResult" result="personnalResult_resultHandler(event)"/>
		
		<fieldinfoprojectservice:FieldinfoprojectService id="fieldinfoprojectService"
														 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
														 showBusyCursor="true"/>
		<s:CallResponder id="getAllField_infoprojectActiveResult" result="getAllField_infoprojectActiveResult_resultHandler(event)"/>
		
		<fieldinfoserviceservice:FieldinfoserviceService id="fieldinfoserviceService"
														 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
														 showBusyCursor="true"/>
		<s:CallResponder id="getAllField_infoserviceLinkResult" result="getAllField_infoserviceLinkResult_resultHandler(event)"/>

		<fieldinfoservicelistservice:FieldinfoservicelistService id="fieldinfoservicelistService"
																 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
																 showBusyCursor="true"/>
		<s:CallResponder id="getAllField_infoservicelistActiveResult" result="getAllField_infoservicelistActiveResult_resultHandler(event)"/>
		

	</fx:Declarations>
	<s:BorderContainer left="2" right="2" top="2" bottom="2" borderVisible="false" cornerRadius="10"
					   fontFamily="Arial" fontSize="12">		
		<s:BorderContainer left="5" right="5" top="5" height="30" backgroundColor="#FFFFFF"
						   borderColor="#23AAE2" borderVisible="false" borderWeight="2"
						   chromeColor="#23AAE2" cornerRadius="5">
			<s:HGroup left="5" height="25" contentBackgroundColor="#FFFFFF" gap="6"
					  verticalCenter="0">
				<mx:LinkBar id="lb1" left="5" height="25" color="#000000"
							dataProvider="{viewStack}"
							fontFamily="Arial" fontSize="11" fontWeight="normal"
							paddingBottom="0"
							paddingLeft="10" paddingRight="10" paddingTop="0" verticalAlign="middle">
				</mx:LinkBar>
			</s:HGroup>
			<s:BorderContainer right="5" height="27" backgroundColor="#FFFFFF"
							   borderColor="#A7A7A7" borderVisible="false" borderWeight="1"
							   cornerRadius="2" verticalCenter="0" enabled="{ddlServiceName.selectedIndex !== -1}">
				<s:HGroup left="5" right="5" height="23" contentBackgroundColor="#66CCCC"
						  verticalAlign="middle" verticalCenter="0">
					<s:BorderContainer top="69" height="27" backgroundColor="{cStart}" borderColor="#A7A7A7"
									   borderVisible="false" borderWeight="1" cornerRadius="2"
									   horizontalCenter="0">
						<mx:LinkButton id="lbtnStart" width="90" height="100%" label="START"
									   click="lbtnStart_clickHandler(event)" color="#000000" fontSize="11"
									   fontWeight="bold" horizontalCenter="0"
									   paddingLeft="5"
									   paddingRight="5" toolTip="Start Synchronization" verticalCenter="0"/>
					</s:BorderContainer>
					<s:BorderContainer top="69" height="27" backgroundColor="{cStop}" borderColor="#A7A7A7"
									   borderVisible="false" borderWeight="1" cornerRadius="2"
									   horizontalCenter="0">
						<mx:LinkButton id="lbtnStop" width="90" height="100%" label="STOP"
									   click="lbtnStop_clickHandler(event)" color="#000000" fontSize="11"
									   fontWeight="bold" horizontalCenter="0"
									   paddingLeft="5"
									   paddingRight="5" toolTip="Stop Synchronization" verticalCenter="0"/>
					</s:BorderContainer>
				</s:HGroup>
			</s:BorderContainer>
		</s:BorderContainer>		
		<s:BorderContainer id="grpViewPDQ" left="5" right="5" top="40" bottom="5" borderColor="#23AAE2"
						   borderWeight="2" chromeColor="#23AAE2" cornerRadius="5">
			<mx:ViewStack id="viewStack" left="0" right="0" top="0" bottom="0" creationPolicy="all">
				<s:NavigatorContent width="100%" height="100%" label="Project Info"  icon="@Embed(source='../images/system_monitor.png')">
					<s:BorderContainer left="2" right="2" top="2" bottom="2" borderVisible="false"
									   cornerRadius="5">
						<s:Scroller left="0" right="0" top="0" bottom="0">
							<s:Group width="100%" height="100%" chromeColor="#FF9999" fontFamily="Arial" fontSize="10">
								<s:BorderContainer left="10" right="10" top="30" borderVisible="false">
									<s:HGroup gap="20" horizontalCenter="0">
										<s:VGroup>
											<s:Label width="100" height="25" text="Project ID :" textAlign="right"
													 verticalAlign="middle"/>
											<s:Label width="100" height="25" text="* Project :" textAlign="right"
													 verticalAlign="middle"/>
											<s:Label width="100" height="25" text="* Service :" textAlign="right"
													 verticalAlign="middle"/>
											<s:Label width="100" height="15"/>
											<s:Label width="100" height="60" paddingTop="7" text="Project Details :"
													 textAlign="right" verticalAlign="top"/>
											<s:Label width="100" height="25" text="Start Date :" textAlign="right"
													 verticalAlign="middle"/>
											<s:Label width="100" height="25" text="Client :" textAlign="right"
													 verticalAlign="middle"/>
										</s:VGroup>
										<s:VGroup>
											<s:Label id="lbreportID" width="100" height="25" fontWeight="bold"
													 paddingLeft="5" text="{reportVO.reportID}"
													 textAlign="left" verticalAlign="middle"/>
											<s:DropDownList id="ddlProjectName" width="620" height="25"
															dataProvider="{arrProjectName}" close="ddlProjectName_closeHandler(event); changeHandler()"
															chromeColor="#23AAE2" labelField="infopro_name"/>
											<s:DropDownList id="ddlServiceName" width="620"
															height="25" chromeColor="#23AAE2" dataProvider="{arrServiceName}"
															close="ddlServiceName_closeHandler(event);changeHandler()"
															labelField="slist_name"/>
											<s:Label id="lbURL" height="15" color="#6A6A6A" paddingLeft="5"
													 text="{urlSensor}" textAlign="left"
													 verticalAlign="middle"/>
											<s:TextArea id="txtDetail" width="620"
														height="60" borderColor="#23AAE2"
														chromeColor="#23AAE2"
														text="{reportVO.report_detail}"
														textAlign="left" change="changeHandler()"/>
											<s:HGroup gap="20">
												<mx:DateField id="dtfStart" width="120" height="25" change="changeHandler()"
															  formatString="YYYY-MM-DD" yearNavigationEnabled="true" 
															  chromeColor="#23AAE2" text="{reportVO.report_startDate}"/>
												<s:Label width="70" height="25" text="End Date :" textAlign="right"
														 verticalAlign="middle"/>
												<mx:DateField id="dtfEnd" width="120" height="25" change="changeHandler()"
															  formatString="YYYY-MM-DD" yearNavigationEnabled="true" 
															  chromeColor="#23AAE2" text="{reportVO.report_endDate}"/>
												<s:CheckBox id="chxLocked" height="25" label="Locked" change="changeHandler()"
															chromeColor="#23AAE2" selected="{reportVO.report_locked === '1'}"/>
											</s:HGroup>
											<s:Label id="lbClient" height="25" paddingLeft="5"
													 text="{reportVO.infopro_clientID}"
													 textAlign="left" verticalAlign="middle"/>
										</s:VGroup>
									</s:HGroup>
								</s:BorderContainer>
								<s:VGroup left="10" right="10" top="270">
									<s:Panel left="10" right="10" top="250" width="100%" height="200"
											 borderVisible="false" chromeColor="#23AAE2" dropShadowVisible="false">
										<s:TextInput id="txtfileName" visible="false" x="20" y="2" borderColor="#FFFFFF"
													 paddingTop="7" textAlign="center"/>
										<mx:LinkButton id="lbtnAddReference" left="10" top="-26" height="20"
													   label="Add Reference" color="#000000" fontSize="10"
													   fontWeight="bold" click="lbtnAddReference_clickHandler(event,1)"
													   icon="@Embed(source='../images/add1.png')"
													   paddingLeft="5" paddingRight="5"
													   toolTip="click to add"/>
										<mx:DataGrid id="dgReference" left="0" right="0" top="0" bottom="0" borderVisible="false"
													 chromeColor="#23AAE2" dataProvider="{arrReference}" fontFamily="Arial" fontSize="10"
													 fontWeight="normal" variableRowHeight="true" editable="true"
													 verticalGridLineColor="0xFFFFFF" itemEditEnd="dgReference_itemEditEndHandler(event)">
											<mx:columns>
												<mx:DataGridColumn width="45" dataField="" headerText="" textAlign="center"
																   wordWrap="true" headerStyleName="centerBold" editable="false">
													<mx:itemRenderer>
														<fx:Component>
															<mx:HBox horizontalAlign="center" verticalAlign="top">
																<mx:LinkButton icon="@Embed(source='../images/delete.png')" width="13"
																			   toolTip="Click to delete" click="outerDocument.alertDeleteRef()"/>
																<mx:LinkButton id="btnGridEdit" icon="@Embed(source='../images/modify12.png')" width="13"
																			   toolTip="Click to edit" click="outerDocument.alertEdit(2)"/>
															</mx:HBox>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="50" dataField="" headerText="Ref" textAlign="center"
																   wordWrap="true" headerStyleName="centerBold" editable="false">
													<mx:itemRenderer>
														<fx:Component>
															<mx:HBox horizontalAlign="center" verticalAlign="top">
																<mx:LinkButton icon="@Embed(source='../images/application_view_gallery.png')" width="13"
																			   toolTip="Click to view" visible="{data.ref_name !== ''}" 
																			   click="outerDocument.alertView();"/>
															</mx:HBox>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="250" dataField="ref_name" headerText="File Name" textAlign="left"
																   wordWrap="true" headerStyleName="centerBold" editable="false"/>
												<mx:DataGridColumn width="150" dataField="ref_by" headerText="By" textAlign="center"
																   headerStyleName="centerBold" wordWrap="true">
													<mx:itemEditor>
														<fx:Component> 
															<mx:TextInput text="{data.ref_by}" width="100%"/>
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn dataField="ref_note" headerText="Note" textAlign="left"
																   wordWrap="true" headerStyleName="centerBold">
													<mx:itemEditor>
														<fx:Component> 
															<mx:TextInput text="{data.ref_note}" width="100%"/>
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
											</mx:columns>
										</mx:DataGrid>
									</s:Panel>
									<s:Panel left="10" right="10" top="250" width="100%" height="200"
											 borderVisible="false" chromeColor="#23AAE2" dropShadowVisible="false">
										<mx:LinkButton id="lbtnAddRepresentative" left="10" top="-26" height="20"
													   label="Add Representative" color="#000000" fontSize="10"
													   fontWeight="bold" click="lbtnAddRepresentative_clickHandler(event)"
													   icon="@Embed(source='../images/add1.png')"
													   paddingLeft="5" paddingRight="5"
													   toolTip="click to add"/>
										<mx:DataGrid id="dgRepresentative" left="0" right="0" top="0" bottom="0" borderVisible="false"
													 chromeColor="#23AAE2" dataProvider="{arrRepresentative}" fontFamily="Arial" fontSize="10"
													 fontWeight="normal" variableRowHeight="true" itemEditEnd="dgRepresentative_itemEditEndHandler(event)"
													 verticalGridLineColor="0xFFFFFF" editable="true">
											<mx:columns>
												<mx:DataGridColumn width="30" dataField="" headerText="" textAlign="center"
																   wordWrap="true" headerStyleName="centerBold" editable="false">
													<mx:itemRenderer>
														<fx:Component>
															<mx:HBox horizontalAlign="center" verticalAlign="top">
																<mx:Canvas>
																	<mx:LinkButton icon="@Embed(source='../images/delete.png')" width="16" height="16"
																				   toolTip="Click to delete" click="outerDocument.alertDeleteRep()"/>
																	
																</mx:Canvas>
															</mx:HBox>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="250" dataField="rep_name" headerText="Name" textAlign="center"
																   wordWrap="true" headerStyleName="centerBold">
													<mx:itemEditor>
														<fx:Component> 
															<mx:TextInput text="{data.rep_name}" width="100%"/>
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn dataField="rep_role" headerText="Role" textAlign="left"
																   headerStyleName="centerBold" wordWrap="true">
													<mx:itemEditor>
														<fx:Component> 
															<mx:TextInput text="{data.rep_role}" width="100%"/>
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="200" dataField="rep_from" headerText="From" textAlign="center"
																   wordWrap="true" headerStyleName="centerBold">
													<mx:itemEditor>
														<fx:Component> 
															<mx:TextInput text="{data.rep_from}" width="100%"/>
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="200" dataField="rep_to" headerText="To" textAlign="center"
																   wordWrap="true" headerStyleName="centerBold">
													<mx:itemEditor>
														<fx:Component> 
															<mx:TextInput text="{data.rep_to}" width="100%"/>
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
											</mx:columns>
										</mx:DataGrid>
									</s:Panel>
									<s:Panel left="10" right="10" top="250" width="100%" height="200"
											 borderVisible="false" chromeColor="#23AAE2" dropShadowVisible="false">
										<mx:DataGrid id="dgPersonnel" left="0" right="0" top="0" bottom="0" borderVisible="false"
													 chromeColor="#23AAE2" fontFamily="Arial" fontSize="10" dataProvider="{arrPersonnal}"
													 fontWeight="normal" variableRowHeight="true" itemEditEnd="dgPersonnel_itemEditEndHandler(event)"
													 verticalGridLineColor="0xFFFFFF" editable="true">
											<mx:columns>
												<mx:DataGridColumn width="30" dataField="" headerText="" textAlign="center"
																   wordWrap="true" headerStyleName="centerBold" editable="false">
													<mx:itemRenderer>
														<fx:Component>
															<mx:HBox horizontalAlign="center" verticalAlign="top">
																<mx:Canvas>
																	<mx:LinkButton icon="@Embed(source='../images/delete.png')" width="16" height="16"
																				   toolTip="Click to delete" click="outerDocument.alertDeletePersonnal()"/>
																</mx:Canvas>
															</mx:HBox>
														</fx:Component>
													</mx:itemRenderer>
												</mx:DataGridColumn>
												<mx:DataGridColumn headerText="Leader" width="50" sortable="false" resizable="false" editable="false"
																   itemRenderer="com.icd.fieldlogger.myHome.report.infomation.leaderActiveCheckbox" 
																   headerStyleName="centerBold"/>
												<mx:DataGridColumn width="350" dataField="person_name" headerText="Name" textAlign="center"
																   headerStyleName="centerBold" wordWrap="true">
													<mx:itemEditor>
														<fx:Component> 
															<mx:TextInput text="{data.person_name}" width="100%"/>
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn width="350" dataField="person_lastname" headerText="Last Name" textAlign="center"
																   wordWrap="true" headerStyleName="centerBold">
													<mx:itemEditor>
														<fx:Component> 
															<mx:TextInput text="{data.person_lastname}" width="100%"/>
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
												<mx:DataGridColumn dataField="person_role" headerText="Role" textAlign="left"
																   wordWrap="true" headerStyleName="centerBold">
													<mx:itemEditor>
														<fx:Component> 
															<mx:TextInput text="{data.person_role}" width="100%"/>
														</fx:Component>
													</mx:itemEditor>
												</mx:DataGridColumn>
											</mx:columns>
										</mx:DataGrid>
										<mx:LinkButton id="lbtnAddPersonnel" left="10" top="-26" height="20"
													   label="Add Personnel" color="#000000" fontSize="10"
													   fontWeight="bold" click="lbtnAddPersonnel_clickHandler(event)"
													   icon="@Embed(source='../images/add1.png')"
													   paddingLeft="5" paddingRight="5"
													   toolTip="start synchronization"/>
									</s:Panel>
								</s:VGroup>
								<mx:LinkButton id="lbtnSave" right="10" width="35" height="20"
											   click="lbtnSave_clickHandler(event)" color="#000000"
											   enabled="{checkSave === false}" focusColor="#70B2EE"
											   fontWeight="bold"
											   icon="@Embed(source='../images/save_before.png')"
											   paddingLeft="0" paddingRight="0"
											   toolTip="Click to Save"/>
								<mx:LinkButton id="lbtnSaved" visible="{checkSave === true}"
											   right="10" width="35" height="20" color="#000000"
											   focusColor="#A2CBEA" fontSize="11" fontWeight="bold"
											   icon="@Embed(source='../images/save_after.png')"
											   paddingLeft="5" paddingRight="5"
											   rollOverColor="#A2CBEA" selectionColor="#A2CBEA"
											   toolTip="Saved"/>
								<s:Label x="10" top="3" height="20" fontSize="11" fontWeight="bold"
										 text="Project Infomation" textAlign="left"
										 verticalAlign="middle"/>
								<mx:HRule left="10" top="26" width="192" height="3"/>
								<s:NumericStepper x="143" y="1" maximum="100" minimum="0"  value="@{Realtime.getInstance().sec}"/>
							</s:Group>
						</s:Scroller>
					</s:BorderContainer>
				</s:NavigatorContent>
				<s:NavigatorContent width="100%" height="100%" label="Data List" icon="@Embed(source='../images/table.png')" creationPolicy="all">
					<dataList:realtime_DatalistModule id="tbdatalist"></dataList:realtime_DatalistModule>
				</s:NavigatorContent>
				<s:NavigatorContent width="100%" height="100%" label="HIDL" icon="@Embed(source='../images/flickr.png')" creationPolicy="all">
					<realtimeData:realtime_HIDLModule id="tbrealtime"></realtimeData:realtime_HIDLModule>
				</s:NavigatorContent>
				<s:NavigatorContent width="100%" height="100%" label="Line Chart" icon="@Embed(source='../images/linechart.png')" creationPolicy="all">
					<lineChart:report_LinechartModule></lineChart:report_LinechartModule>
				</s:NavigatorContent>
				
				<s:NavigatorContent width="100%" height="100%" label="Bar Chart"  icon="@Embed(source='../images/columnchart.png')" creationPolicy="all">
					<barChart:report_BarchartModule></barChart:report_BarchartModule>
				</s:NavigatorContent>
				
			</mx:ViewStack>
		</s:BorderContainer>
		
	</s:BorderContainer>
	
	
</s:TitleWindow>
